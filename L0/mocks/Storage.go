// Code generated by mockery v2.14.0. DO NOT EDIT.

package mocks

import (
	context "context"

	model "github.com/dingowd/WB/L0/model"
	mock "github.com/stretchr/testify/mock"
)

// Storage is an autogenerated mock type for the Storage type
type Storage struct {
	mock.Mock
}

// Close provides a mock function with given fields:
func (_m *Storage) Close() error {
	ret := _m.Called()

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Connect provides a mock function with given fields: ctx, dsn
func (_m *Storage) Connect(ctx context.Context, dsn string) error {
	ret := _m.Called(ctx, dsn)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(ctx, dsn)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// CreateOrder provides a mock function with given fields: d
func (_m *Storage) CreateOrder(d model.Order) error {
	ret := _m.Called(d)

	var r0 error
	if rf, ok := ret.Get(0).(func(model.Order) error); ok {
		r0 = rf(d)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetOrder provides a mock function with given fields: id
func (_m *Storage) GetOrder(id string) (model.Order, error) {
	ret := _m.Called(id)

	var r0 model.Order
	if rf, ok := ret.Get(0).(func(string) model.Order); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Get(0).(model.Order)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetOrdersByLimit provides a mock function with given fields: a
func (_m *Storage) GetOrdersByLimit(a int) (model.CacheOrderList, error) {
	ret := _m.Called(a)

	var r0 model.CacheOrderList
	if rf, ok := ret.Get(0).(func(int) model.CacheOrderList); ok {
		r0 = rf(a)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(model.CacheOrderList)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int) error); ok {
		r1 = rf(a)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// IsOrderExist provides a mock function with given fields: id
func (_m *Storage) IsOrderExist(id string) bool {
	ret := _m.Called(id)

	var r0 bool
	if rf, ok := ret.Get(0).(func(string) bool); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

type mockConstructorTestingTNewStorage interface {
	mock.TestingT
	Cleanup(func())
}

// NewStorage creates a new instance of Storage. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewStorage(t mockConstructorTestingTNewStorage) *Storage {
	mock := &Storage{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
